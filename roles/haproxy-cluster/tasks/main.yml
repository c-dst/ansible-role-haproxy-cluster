---
- name: Ensure task is run on tested distrib
  ansible.builtin.assert:
    that:
      - ansible_distribution in ['Ubuntu']
  tags: always

- name: Ensure task is run on tested distrib release
  ansible.builtin.assert:
    that:
      - ansible_distribution_version in ['20.04']
  when: ansible_distribution == 'Ubuntu'
  tags: always

# Config check and facts settings
- name: Ensure at lowest on cluster is defined
  ansible.builtin.assert:
    that:
      - (haproxy_service_config | list | length) >= 1
  tags: always

- name: Ensure current host is present in cluster config
  ansible.builtin.assert:
    that:
      - (haproxy_cluster | selectattr('fqdn', 'eq', ansible_fqdn) | list | length) == 1
  tags: always

- name: Retrieve current host settings from cluster config
  ansible.builtin.set_fact:
    current_proxyhost: "{{ (haproxy_cluster | selectattr('fqdn', 'eq', ansible_fqdn) | list)[0] }}"
  tags: always

- name: Determine if current server is a master or backup node
  ansible.builtin.set_fact:
    is_master: "{{ current_proxyhost.state | default( 'backup' ) == 'master' }}"
    is_backup: "{{ current_proxyhost.state | default( 'backup' ) == 'backup' }}"
  tags: always

- name: Determine installed firewall
  ansible.builtin.import_tasks: check_firewall.yml
  tags: always

- name: sysctl setup
  ansible.posix.sysctl:
    name: '{{ item.key }}'
    value: '{{ item.value }}'
    sysctl_set: yes
    state: present
    reload: yes
  loop:
    - { key: net.ipv4.ip_forward,  value: 1 }

# Keepalived
- name: Keepalived
  block:
  - name: install keepalived
    ansible.builtin.apt:
      name: "{{ item }}"
      state: present
      update_cache: yes
    loop: "{{ keepalived_packages }}"

  - name: setup keepalived
    block:
    - name: create keepalived.conf
      ansible.builtin.template:
        src: keepalived/keepalived.conf.j2
        dest: /etc/keepalived/keepalived.conf
        validate: keepalived -t -f %s
      notify:
        - restart keepalived

  tags: keepalived

- name: update firewall rules - Keepalived
  ansible.builtin.import_tasks: fw_keepalived.yml
  tags:
    - firewall
    - keepalived


# HAProxy
- name: HAProxy
  block:
  - name: add HAProxy repository
    ansible.builtin.apt_repository:
      repo: "{{ haproxy_apt_repository_url }}"
      state: present
      codename: "{{ ansible_distribution_release }}"

  - name: install HAProxy
    ansible.builtin.apt:
      name: "{{ item }}"
      state: present
      update_cache: yes
    loop: "{{ haproxy_packages }}"

  - name: setup HAProxy
    block:
    - name: create ssl directory
      ansible.builtin.file:
        path: "{{ item.path }}"
        state: directory
        mode: "{{ item.mode }}"
        owner: "{{ item.owner }}"
        group: "{{ item.group }}"
      loop:
        - { path: "/etc/haproxy/ssl", mode: 'u=rwX,g=rX,o=', owner: "{{ haproxy_user }}", group: "{{ haproxy_group }}" }

    - name: create certificate file
      ansible.builtin.template:
        src: haproxy/certificate.j2
        dest: "/etc/haproxy/ssl/{{ item.key }}.pem"
      loop: "{{ haproxy_service_config | dict2items }}"
      when: item.value.certificate is defined
      no_log: true
      notify:
        - restart haproxy

    - name: remove unnecessary certificate file
      ansible.builtin.file:
        path: "/etc/haproxy/ssl/{{ item.key }}.pem"
        state: absent
      loop: "{{ haproxy_service_config | dict2items }}"
      when: item.value.certificate is not defined
      no_log: true
      notify:
        - restart haproxy

    - name: create dhparam file "{{ haproxy_dhparams.file }}"
      ansible.builtin.template:
        src: haproxy/dhparam.txt.j2
        dest: "{{ haproxy_dhparams.file }}"
      when: haproxy_dhparams is defined
      notify:
        - restart haproxy

    - name: copy custom error files
      ansible.builtin.template:
        src: "errorfiles/{{ item }}.http"
        dest: "/etc/haproxy/errors/"
      loop: "{{ haproxy_cluster_config.errorfiles }}"
      when: haproxy_cluster_config.errorfiles is defined
      notify:
        - restart haproxy

    - name: create haproxy.cfg
      ansible.builtin.template:
        src: haproxy/haproxy.cfg.j2
        dest: /etc/haproxy/haproxy.cfg
        validate: haproxy -c -f %s
      notify:
        - restart haproxy

  tags: haproxy

- name: update firewall rules - Haproxy
  ansible.builtin.import_tasks: fw_haproxy.yml
  tags:
    - firewall
    - haproxy
