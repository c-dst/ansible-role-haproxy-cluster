# {{ ansible_managed }}
## Global
global
{% for log in haproxy_cluster_config.global.logs | default (["log stdout local0", "log stdout local1 notice"]) %}
    {{ log }}
{% endfor %}
    chroot /var/lib/haproxy

    stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
    stats timeout 30s
    user {{ haproxy_user }}
    group {{ haproxy_group }}
    daemon

    # HAProxy Profiling
    profiling.tasks on

    # Default SSL material locations
    ca-base {{ haproxy_cluster_config['global'].ca_base | default ('/etc/ssl/certs') }}
    crt-base {{ haproxy_cluster_config['global'].crt_base | default ('/etc/haproxy/ssl') }}

    # See: {{ haproxy_ssl_config }}
{% if haproxy_ssl_ciphers[haproxy_ssl_security_level].bind_ciphers is defined %}
    ssl-default-bind-ciphers {{ haproxy_ssl_ciphers[haproxy_ssl_security_level].bind_ciphers }}
{% endif %}
{% if haproxy_ssl_ciphers[haproxy_ssl_security_level].bind_ciphersuites is defined %}
    ssl-default-bind-ciphersuites {{ haproxy_ssl_ciphers[haproxy_ssl_security_level].bind_ciphersuites }}
{% endif %}
{% if haproxy_ssl_ciphers[haproxy_ssl_security_level].bind_options is defined %}
    ssl-default-bind-options {{ haproxy_ssl_ciphers[haproxy_ssl_security_level].bind_options }}
{% endif %}
{% if haproxy_ssl_ciphers[haproxy_ssl_security_level].server_ciphers is defined %}
    ssl-default-server-ciphers {{ haproxy_ssl_ciphers[haproxy_ssl_security_level].server_ciphers }}
{% endif %}
{% if haproxy_ssl_ciphers[haproxy_ssl_security_level].server_ciphersuites is defined %}
    ssl-default-server-ciphersuites {{ haproxy_ssl_ciphers[haproxy_ssl_security_level].server_ciphersuites }}
{% endif %}
{% if haproxy_ssl_ciphers[haproxy_ssl_security_level].server_options is defined %}
    ssl-default-server-options {{ haproxy_ssl_ciphers[haproxy_ssl_security_level].server_options }}
{% endif %}

{% if haproxy_dhparams.file is defined and haproxy_ssl_security_level in [ 'intermediate', 'old' ]%}
    # SSL dhparam
    ssl-dh-param-file {{ haproxy_dhparams.file }}
{% endif %}

## Defaults
defaults
    log     global

    timeout connect {{ haproxy_cluster_config.defaults.timeout_connect | default (5000) }}
    timeout client  {{ haproxy_cluster_config.defaults.timeout_client | default (50000) }}
    timeout server  {{ haproxy_cluster_config.defaults.timeout_client | default (50000) }}

{% for error in haproxy_cluster_config.errorfiles | default ([400,  408, 500, 502, 503, 504]) %}
    errorfile {{ error }} /etc/haproxy/errors/{{ error }}.http
{% endfor %}

{% if haproxy_statsistics_allowedhosts | length > 0 or haproxy_statsistics_admin_allowedhosts | length > 0 %}
## Frontend front_statistics
frontend front_statistics
    bind {{ lookup('community.general.dig', ansible_fqdn ) }}:{{ haproxy_statsistics_port }} {% if haproxy_statsistics_ssl %}ssl crt {{ ansible_fqdn }}.pem alpn h2,http/1.1{% endif %}

{% if haproxy_statsistics_bind_service %}
{% for instance in haproxy_service_config %}
    bind {{ lookup('community.general.dig', instance ) }}:{{ haproxy_statsistics_port }} {% if haproxy_statsistics_ssl %}ssl crt {{ instance }}.pem alpn h2,http/1.1{% endif %}
{% endfor %}
{% endif %}


    mode http
    option httplog
    option dontlognull

{% for request in haproxy_default_http_requests %}
    http-request {{ request }}
{% endfor %}

{% for ip in haproxy_statsistics_allowedhosts %}
    acl allowed_stats_ips src {{ ip }}
{% else %}
    acl allowed_stats_ips src 127.0.0.1
{% endfor %}
{% for ip in haproxy_statsistics_admin_allowedhosts %}
    acl allowed_admin_stats_ips src {{ ip }}
{% else %}
    acl allowed_admin_stats_ips src 127.0.0.1
{% endfor %}
    http-request deny if !allowed_stats_ips !allowed_admin_stats_ips

    stats enable
    stats uri /
    stats refresh 30s
    stats admin if allowed_admin_stats_ips
{% endif%}

{% for instance in haproxy_service_config %}
{% set haproxy = haproxy_service_config[instance].haproxy | default ('{}') %}
{% if haproxy | length > 0 %}
{# set bind_address #}
{% if lookup('community.general.dig', instance) != "NXDOMAIN" %}
{% set bind_adddress = lookup('community.general.dig', instance) %}
{% else %}
{% set bind_adddress = lookup('community.general.dig', ansible_fqdn) %}
{% endif %}
{# set mode - Default : tcp #}
{% set mode = haproxy.mode | default ('tcp') %}
{% if mode != "tcp" and mode != 'http' %}
{% set mode = "tcp" %}
{% endif %}
{# check config directive backend or listen #}
{% set param_backend = haproxy.backends | default (false) %}
{% set param_listen = haproxy.listen | default (false) %}
{% if param_backend %}
{# set backend name - Default : instance #}
{% set backend_name = instance %}
{# set ssl / https params - Default : false #}
{% if haproxy.ports is defined and haproxy.ports is iterable %}
{% set haproxy_ports = haproxy.ports %}
{% elif haproxy.ports is defined %}
{% set haproxy_ports = [ haproxy.ports ] %}
{% else %}
{% set haproxy_ports = [] %}
{% endif %}
{% if mode == 'http' %}
{% set is_http = (( haproxy_ports | select ('eq', '80' ) | list ) | length ) | bool %}
{% set is_https = (( haproxy_ports | select ('eq', '443' ) | list ) | length ) | bool %}
{% set is_ssl = haproxy.frontend.ssl | default (false) %}
{% else %}
{% set is_http = false %}
{% set is_https = false %}
{% set is_ssl = false %}
{% endif %}
## Frontend front_{{ instance }}
frontend front_{{ instance }}
    mode {{ mode }}
{% for option in haproxy.frontend.options | default ( haproxy_default_frontend_options[mode] ) %}
    option {{ option }}
{% endfor %}

{% for port in haproxy_ports %}
{% if is_ssl and port != 80 or mode == 'http' and port == 443 %}
    bind {{ bind_adddress }}:{{ port }} ssl crt {{ instance }}.pem alpn h2,http/1.1
{% else%}
    bind {{ bind_adddress }}:{{ port }}
{% endif %}
{% endfor %}

{# http specific #}
{% if mode == 'http' %}
    # http-request
{% for request in haproxy.frontend.http_requests | default ( haproxy_default_http_requests )%}
    http-request {{ request }}
{% endfor %}

{# redirect - force https #}
{% if ( is_http and is_https ) %}
    # force https redirect
    http-request redirect scheme https code 301 if !{ ssl_fc }

{% endif %}
{# HSTS max age #}
{% if is_https or is_ssl %}
    # HSTS ({{ haproxy_default_hsts_max_age }} seconds)
    http-response set-header Strict-Transport-Security max-age={{ haproxy_default_hsts_max_age }}

{% endif %}
{% endif %}
{# ACLs #}
{% for acl in haproxy.frontend.acls | default ( [] )%}
    acl {{ acl }}
{% endfor %}

{# use backend with conditions #}
{% for backend in haproxy.frontend.use_backends | default ( [] ) %}
{% if backend.condition is defined %}
{% if backend.number is defined and haproxy.backends | list | length > 1 %}
{# use_backend directive with more than one backend #}
    use_backend back_{{ backend_name }}_{{ backend.number }} if {{ backend.condition }}
{% elif backend.number is not defined and haproxy.backends | list | length > 1 %}
{# use_backend directive with more than one backend #}
    use_backend back_{{ backend_name }}_1 if {{ backend.condition }}
{% elif backend.number is not defined %}
{# use_backend directive with more than one backend #}
    use_backend back_{{ backend_name }} if {{ backend.condition }}
{% else %}
{# use_backend directive with only one backend #}
    use_backend back_{{ backend_name }}
{% endif %}
{% endif %}
{% endfor %}

{# Manage **default_backend** #}
{# If **default_backend** is defined and match **first** or **last** #}
{% if haproxy.default_backend is defined and haproxy.default_backend in ['first', 'last'] and haproxy.backends | list | length > 1 %}
{# Set **default_backend** to **first** or **last** defined backend #}
    default_backend back_{{ backend_name }}_{% if haproxy.frontend.default_backend == 'first' %}1{% else %}haproxy.backends | list | length{% endif %}

{# If **default_backend** is defined and don't match **first** or **last** #}
{% elif haproxy.default_backend is defined %}
{# Set **default_backend** to specific name  #}
    default_backend back_{{ haproxy.default_backend }}

{% endif %}
{# If no **default_backend** and no specific **used_backend** are defined #}
{% if haproxy.default_backend is not defined and haproxy.frontend.use_backends is not defined and haproxy.backends | list | length > 1 %}
{# Set **default_backend** to **first** defined backend #}
    default_backend back_{{ backend_name }}_1

{% elif haproxy.default_backend is not defined and haproxy.frontend.use_backends is not defined %}
{# Set **default_backend** #}
    default_backend back_{{ backend_name }}

{% endif %}

{% for backend in haproxy.backends %}
{# set balance - Default : roundrobin#}
{% set balance = backend.balance | default ('roundrobin') %}
{% if loop.length > 1 %}{% set backend_name = instance + "_" ~ loop.index -%}{% endif %}
## Backend back_{{ backend_name }}
backend back_{{ backend_name }}
    mode {{ mode }}
    balance {{ balance }}

{% for option in backend.options | default ( haproxy_default_backend_options[mode] ) %}
    option {{ option }}
{% if option == 'httpchk' %}
{% for http_check in backend.http_checks | default ('') %}
    http-check {{ http_check }}
{% endfor %}
{% endif%}
{% endfor %}

    default-server {{ backend.default_server | default ('check') }}

{% for host in backend.hosts %}
    server {{ host.fqdn.split('.')[0] }} {{ lookup('community.general.dig', host.fqdn ) }}:{{ host.port }} check {{ host.check | default ('') }}
{% endfor %}
{% endfor %}
{% elif param_listen %}
# TBD: Listen
{% endif %}
{% endif %}
{% endfor %}