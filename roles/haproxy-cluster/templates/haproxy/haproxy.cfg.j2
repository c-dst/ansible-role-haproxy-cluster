global
        log /var/log/haproxy-admin.log      local0
        log /var/log/haproxy.log            local1 notice
        chroot /var/lib/haproxy
        stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
        stats timeout 30s
        user haproxy
        group haproxy
        daemon

        # HAProxy Profiling
        profiling.tasks on

        # Default SSL material locations
        ca-base /etc/ssl/certs
        crt-base /etc/ssl/private

        # See: https://ssl-config.mozilla.org/#server=haproxy&version=2.4.12&config=intermediate&openssl=1.1.1k&guideline=5.6
        ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
        ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
        ssl-default-bind-options prefer-client-ciphers no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets

        ssl-default-server-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
        ssl-default-server-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
        ssl-default-server-options no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets

        # curl https://ssl-config.mozilla.org/ffdhe2048.txt > /path/to/dhparam
        # ssl-dh-param-file /path/to/dhparam

defaults
        log     global

        timeout connect 5000
        timeout client  50000
        timeout server  50000

        errorfile 400 /etc/haproxy/errors/400.http
        errorfile 403 /etc/haproxy/errors/403.http
        errorfile 408 /etc/haproxy/errors/408.http
        errorfile 500 /etc/haproxy/errors/500.http
        errorfile 502 /etc/haproxy/errors/502.http
        errorfile 503 /etc/haproxy/errors/503.http
        errorfile 504 /etc/haproxy/errors/504.http

{% if haproxy_statsistics_allowed_ips | length > 0 %}
## Frontend front_statistics
frontend front_statistics
    bind {{ lookup('community.general.dig', network.hostname + '.' + network.hostdomain) }}:8404
    # ssl not yet implemented

    mode http
    option httplog
    option dontlognull

    http-request capture req.hdr(Host) len 100
    http-request capture req.hdr(User-Agent) len 100
    http-request capture ssl_fc_protocol len 10

{% for ip in haproxy_statsistics_allowed_ips %}
    acl allowed_stats_ips src {{ ip }}
{% endfor %}
    http-request deny if !allowed_stats_ips

    stats enable
    stats uri /
    stats refresh 30s
    stats admin if allowed_stats_ips
{% endif%}

{% for instance in haproxy_service_config %}
{% set haproxy = haproxy_service_config[instance].haproxy | default ('{}') %}
{% if haproxy | length > 0 %}
{# set bind_address #}
{% if lookup('community.general.dig', instance) != "NXDOMAIN" %}
{% set bind_adddress = lookup('community.general.dig', instance) %}
{% else %}
{% set bind_adddress = lookup('community.general.dig', network.hostname + '.' + network.hostdomain) %}
{% endif %}
{# set mode - Default: : tcp #}
{% set mode = haproxy.mode | default ('tcp') %}
{# Set default_fronted_log / default_backend_log depending on mode #}
{% if mode == "tcp" %}
{% set default_frontend_log = ['tcplog'] %}
{% set default_backend_log = ['tcp-check'] %}
{% elif mode == "http"%}
{% set default_frontend_log = ['httplog', 'dontlognull'] %}
{% set default_backend_log = ['httpchk'] %}
{% else %}
{# if mode not tcp nor http, set mode to tcp #}
{% set mode = "tcp" %}
{% set default_frontend_log = ['tcplog'] %}
{% set default_backend_log = ['tcp-check'] %}
{% endif %}
{# check config directive frontend / backend or listen #}
{% set param_backend = haproxy.backend | default (false) %}
{% set param_listen = haproxy.listen | default (false) %}
{% if param_backend %}
{# set balance - Default: roundrobin#}
{% set balance = haproxy.backend.balance | default ('roundrobin') %}
## Frontend front_{{ instance }}
frontend front_{{ instance }}

    mode {{ mode }}
{% for option in haproxy.frontend.options | default ( default_frontend_log ) %}
    option {{ option }}
{% endfor %}

{% for port in haproxy.ports | default ( [ haproxy.port ] ) %}
    bind {{ bind_adddress }}:{{ port }}
{% endfor %}

    default_backend back_{{ instance }}

## Backend back_{{ instance }}
backend back_{{ instance }}
    mode {{ mode }}
    balance {{ balance }}

{% for option in haproxy.backend.options | default ( default_backend_log ) %}
    option {{ option }}
{% if option == "httpchk" and haproxy.backend.http-check is defined %}
    http-check {{ haproxy.backend.http-check | default ('') }}
{% endif%}
{% endfor %}

    {{ haproxy.backend.default-server | default ('default-server check') }}

{% for host in haproxy.backend.hosts %}
    server {{ host.fqdn.split('.')[0] }} {{ lookup('community.general.dig', host.fqdn ) }}:{{ host.port }} check {{ host.check | default ('') }}
{% endfor %}
{% elif param_listen %}
# TBD: Listen
{% endif %}
{% endif %}
{% endfor %}